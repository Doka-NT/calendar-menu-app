name: Create Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  release:
    name: Create GitHub Release
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: Import Code Signing Certificate
        env:
          CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          # Создаем временный keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          
          # Импортируем сертификат
          CERTIFICATE_PATH=$RUNNER_TEMP/cert.p12
          echo "$CERTIFICATE_BASE64" | base64 --decode > "$CERTIFICATE_PATH"
          security import "$CERTIFICATE_PATH" -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security list-keychain -d user -s "$KEYCHAIN_PATH"
          
          # Разрешаем codesign использовать сертификат без запроса пароля
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
      
      - name: Build App
        run: |
          xcodebuild \
            -scheme "CalendarMenuApp" \
            -project CalendarMenuApp.xcodeproj \
            -configuration Release \
            -derivedDataPath build/DerivedData \
            clean build \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="CalendarMenuApp Developer" \
            DEVELOPMENT_TEAM=""
      
      - name: Locate built app
        run: |
          APP_PATH=$(find build/DerivedData -name "CalendarMenuApp.app" -type d | head -n 1)
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
          echo "Found app at: $APP_PATH"
      
      - name: Prepare Release directory
        run: |
          mkdir -p build/Release
          cp -R "$APP_PATH" build/Release/CalendarMenuApp.app
      
      - name: Sign Application Bundle
        run: |
          echo "Signing application bundle..."
          codesign --force --deep --sign "CalendarMenuApp Developer" build/Release/CalendarMenuApp.app
          
          echo "Verifying signature..."
          codesign --verify --verbose build/Release/CalendarMenuApp.app
      
      - name: Create DMG
        run: |
          mkdir -p dist
          hdiutil create -volname "CalendarMenuApp" \
            -srcfolder build/Release/CalendarMenuApp.app \
            -ov -format UDZO \
            dist/CalendarMenuApp.dmg
      
      - name: Get tag name
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: Release ${{ steps.get_tag.outputs.tag }}
          draft: false
          prerelease: false
          files: |
            dist/CalendarMenuApp.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Cleanup Keychain
        if: always()
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          if [ -f "$KEYCHAIN_PATH" ]; then
            security delete-keychain "$KEYCHAIN_PATH"
          fi
